<!-- title = regen_Correlator.vi -->
<!-- summary = 
Build a LabVIEW subVI to demodulate a pulse-amplitude modulated (PAM) signal using a correlator.
-->

<?xml version='1.0' standalone='yes' ?>
<LVData>
<Version>8.2</Version>

<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>LabVIEW SubVI: regen_Correlator.vi</Val> </String>

<Cluster> <Name>list</Name> <NumElts>3</NumElts>
<EW> <Name>type</Name> <Choice>Bulleted</Choice> <Choice>Enumerated</Choice> <Val>0</Val> </EW>
<String> <Name>list name (optional)</Name> <Val></Val> </String>
<Array> <Name>list items</Name> <Dimsize>2</Dimsize>
	<String> <Name>String</Name> <Val> {emphasis}Description:{/emphasis} 
			Demodulate a pulse-amplitude modulated (PAM) signal using a correlator.
			The correlator multiples the received signal by the same pulse shape used
			by the transmitter and integrates the product over the bit interval.
			A Boolean control indicates when to clear the integrator and restart the pulse.

			This subVI is intended for point-by-point operation within a repeating
			structure such as a for-loop or while-loop.
	</Val> </String>
	<String> <Name>String</Name> <Val> {emphasis}Category:{/emphasis} 
			Bitstream regeneration ("regen" prefix)
	</Val> </String>
</Array>
</Cluster>


<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Inputs (Controls)</Val> </String>

<Cluster> <Name>list</Name> <NumElts>3</NumElts>
<EW> <Name>type</Name> <Choice>Bulleted</Choice> <Choice>Enumerated</Choice> <Val>1</Val> </EW>
<String> <Name>list name (optional)</Name> <Val></Val> </String>
<Array> <Name>list items</Name> <Dimsize>4</Dimsize>
	<String> <Name>String</Name> <Val>{code type=&quot;inline&quot;}signal in{/code} -- DBL</Val> </String>
	<String> <Name>String</Name> <Val>{code type=&quot;inline&quot;}fs [Hz]{/code} -- DBL</Val> </String>
	<String> <Name>String</Name> <Val>{code type=&quot;inline&quot;}start integrating{/code} -- Boolean</Val> </String>
	<String> <Name>String</Name> <Val>{code type=&quot;inline&quot;}pulse{/code} -- 1-D array of DBL</Val> </String>
</Array>
</Cluster>

<String> <Name>para</Name> <Val>
Parentheses ( ) indicate default value; square brackets [ ] designate units.
</Val> </String>



<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Outputs (Indicators)</Val> </String>

<Cluster> <Name>list</Name> <NumElts>3</NumElts>
<EW> <Name>type</Name> <Choice>Bulleted</Choice> <Choice>Enumerated</Choice> <Val>1</Val> </EW>
<String> <Name>list name (optional)</Name> <Val></Val> </String>
<Array> <Name>list items</Name> <Dimsize>1</Dimsize>
	<String> <Name>String</Name> <Val>{code type=&quot;inline&quot;}signal out{/code} -- DBL</Val> </String>
</Array>
</Cluster>

<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Required Behavior</Val> </String>

<Cluster> <Name>list</Name> <NumElts>3</NumElts>
<EW> <Name>type</Name> <Choice>Bulleted</Choice> <Choice>Enumerated</Choice> <Val>0</Val> </EW>
<String> <Name>list name (optional)</Name> <Val></Val> </String>
<Array> <Name>list items</Name> <Dimsize>2</Dimsize>
	<String> <Name>String</Name> <Val>
			{code type=&quot;inline&quot;}signal in{/code} is scanned from the beginning
			to detect when the signal amplitude exceeds {code type=&quot;inline&quot;}threshold{/code}.
			If the input signal never exceeds the threshold, {code type=&quot;inline&quot;}preamble out{/code} 
			returns an empty waveform and {code type=&quot;inline&quot;}preamble detected?{/code} returns
			{code type=&quot;inline&quot;}F{/code}.
	</Val> </String>
	<String> <Name>String</Name> <Val>
			Once a valid threshold crossing is detected, {code type=&quot;inline&quot;}preamble out{/code} 
			extracts a portion of {code type=&quot;inline&quot;}signal in{/code} of duration
			{code type=&quot;inline&quot;}bit intervals to keep{/code} times the bit interval
			{code type=&quot;inline&quot;}Tb{/code}; the extracted signal begins at the location of the first threshold
			crossing plus {code type=&quot;inline&quot;}bit intervals to skip{/code} times the
			bit interval. The Boolean indicator {code type=&quot;inline&quot;}preamble detected?{/code} 
			is set to {code type=&quot;inline&quot;}T{/code}.
	</Val> </String>
</Array>
</Cluster>


<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>LabVIEW Coding Tips</Val> </String>

<String> <Name>para</Name> <Val>
		View the screencast video in {cnxn document=&quot;m14767&quot;}Create a SubVI in LabVIEW{/cnxn} to learn the mechanics of subVIs.
</Val> </String>

<String> <Name>para</Name> <Val>
		Refer to the {cnxn target=&quot;video&quot;/} screencast video for LabVIEW coding tips and techniques specific to this subVI.
</Val> </String>

<Cluster> <Name>video</Name> <NumElts>4</NumElts>
<String> <Name>ID (optional)</Name> <Val>video</Val> </String>
<String> <Name>video name</Name> <Val>vi</Val> </String>
<String> <Name>webpage title</Name> <Val>regen_Correlator.vi</Val> </String>
<String> <Name>caption</Name> <Val>LabVIEW coding tips and techniques for regen_Correlator.vi</Val> </String>
</Cluster>

<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->

</LVData>

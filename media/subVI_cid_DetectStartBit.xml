<!-- title = cid_DetectStartBit.vi -->
<!-- summary = 
Build a LabVIEW subVI to detect the first start bit in the Caller ID message bitstream.
-->

<?xml version='1.0' standalone='yes' ?>
<LVData>
<Version>8.2</Version>

<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>LabVIEW SubVI: cid_DetectStartBit.vi</Val> </String>

<Cluster> <Name>list</Name> <NumElts>3</NumElts>
<EW> <Name>type</Name> <Choice>Bulleted</Choice> <Choice>Enumerated</Choice> <Val>0</Val> </EW>
<String> <Name>list name (optional)</Name> <Val></Val> </String>
<Array> <Name>list items</Name> <Dimsize>2</Dimsize>
	<String> <Name>String</Name> <Val> {emphasis}Description:{/emphasis} 
			Detect the first start bit in the Caller ID message bitstream, and return
			only the remaining bits in the bitstream.

			The Caller ID message consists of three distinct regions: (1) channel
			seizure (alternating pattern of {code type=&quot;inline&quot;}T{/code} 
			and {code type=&quot;inline&quot;}F{/code} values), (2) steady mark
			(constant {code type=&quot;inline&quot;}T{/code} values), and (3) data block
			containing the message payload.

			This subVI detects the steady mark region and then identifies the array index
			(time point) at which the input bitstream first changes to {code type=&quot;inline&quot;}F{/code}.
	</Val> </String>
	<String> <Name>String</Name> <Val> {emphasis}Category:{/emphasis} 
			Caller ID decoding ("cid" prefix)
	</Val> </String>
</Array>
</Cluster>


<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Inputs (Controls)</Val> </String>

<Cluster> <Name>list</Name> <NumElts>3</NumElts>
<EW> <Name>type</Name> <Choice>Bulleted</Choice> <Choice>Enumerated</Choice> <Val>1</Val> </EW>
<String> <Name>list name (optional)</Name> <Val></Val> </String>
<Array> <Name>list items</Name> <Dimsize>1</Dimsize>
	<String> <Name>String</Name> <Val>{code type=&quot;inline&quot;}bitstream in{/code} -- 1-D Boolean array</Val> </String>
</Array>
</Cluster>

<String> <Name>para</Name> <Val>
Parentheses ( ) indicate default value; square brackets [ ] designate units.
</Val> </String>



<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Outputs (Indicators)</Val> </String>

<Cluster> <Name>list</Name> <NumElts>3</NumElts>
<EW> <Name>type</Name> <Choice>Bulleted</Choice> <Choice>Enumerated</Choice> <Val>1</Val> </EW>
<String> <Name>list name (optional)</Name> <Val></Val> </String>
<Array> <Name>list items</Name> <Dimsize>2</Dimsize>
	<String> <Name>String</Name> <Val>{code type=&quot;inline&quot;}datablock bitstream{/code} -- 1-D Boolean array</Val> </String>
	<String> <Name>String</Name> <Val>{code type=&quot;inline&quot;}start bit index{/code} -- I32</Val> </String>
</Array>
</Cluster>

<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Required Behavior</Val> </String>

<Cluster> <Name>list</Name> <NumElts>3</NumElts>
<EW> <Name>type</Name> <Choice>Bulleted</Choice> <Choice>Enumerated</Choice> <Val>0</Val> </EW>
<String> <Name>list name (optional)</Name> <Val></Val> </String>
<Array> <Name>list items</Name> <Dimsize>3</Dimsize>
	<String> <Name>String</Name> <Val>
			The {code type=&quot;inline&quot;}bitstream in{/code} input should contain a complete Caller ID message bitstream
			as generated by other demodulating and bit synchronization and sampling subsystems.
	</Val> </String>
	<String> <Name>String</Name> <Val>
			The {code type=&quot;inline&quot;}datablock bitstream{/code} output contains only the data block portion of the
			input bitstream, beginning with the first start bit of the first character, i.e., the first frame.
			If no data block is detected then {code type=&quot;inline&quot;}datablock bitstream{/code} will return empty.
	</Val> </String>
	<String> <Name>String</Name> <Val>
			{code type=&quot;inline&quot;}start bit index{/code} is the index (location) of the data block detected
			in the input message. If no data block is detected then {code type=&quot;inline&quot;}start bit index{/code} will return -1.
	</Val> </String>
</Array>
</Cluster>


<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>LabVIEW Coding Tips</Val> </String>

<String> <Name>para</Name> <Val>
		View the screencast video in {cnxn document=&quot;m14767&quot;}Create a SubVI in LabVIEW{/cnxn} to learn the mechanics of subVIs.
</Val> </String>

<String> <Name>para</Name> <Val>
		Refer to the {cnxn target=&quot;video&quot;/} screencast video for LabVIEW coding tips and techniques specific to this subVI.
</Val> </String>

<Cluster> <Name>video</Name> <NumElts>4</NumElts>
<String> <Name>ID (optional)</Name> <Val>video</Val> </String>
<String> <Name>video name</Name> <Val>vi</Val> </String>
<String> <Name>webpage title</Name> <Val>cid_DetectStartBit.vi</Val> </String>
<String> <Name>caption</Name> <Val>LabVIEW coding tips and techniques for cid_DetectStartBit.vi</Val> </String>
</Cluster>

<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->

</LVData>
